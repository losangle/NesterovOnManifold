function [finalX, info] = nesterov(problem, xCur, options)
    localdefaults.maxiter = 1000;
    localdefaults.tolgradnorm =  1e-6;
    localdefaults.alpha = 1; % < 1/L
    
    % Merge global and local defaults, then merge w/ user options, if any.
    localdefaults = mergeOptions(getGlobalDefaults(), localdefaults);
    if ~exist('options', 'var') || isempty(options)
        options = struct();
    end
    options = mergeOptions(localdefaults, options);
    
    xk = cell(1, options.maxiter);
    yk = cell(1, options.maxiter);
    info = cell(1, options.maxiter);
    M = problem.M;
    
    iter = 0;
    xk(1) = xCur;
    yk(1) = xCur;
    stepsize = 1;
    storedb = StoreDB(options.storedepth);
    key = storedb.getNewKey();
    xCurCost = getCost(problem, xCur);
    xCurGradient = getGradient(problem, xCur);
    xCurGradNorm = M.norm(xCur, xCurGradient);
    stats = savestats();
    info(1) = stats;
    
    
    while(1)
        curIter = iter + 1;
        % Run standard stopping criterion checks
        [stop, reason] = stoppingcriterion(problem, xCur, options, ...
            info, iter+1);
        
        % If none triggered, run specific stopping criterion check
        if ~stop && stats.stepsize < options.minstepsize
            stop = true;
            reason = sprintf(['Last stepsize smaller than minimum '  ...
                'allowed; options.minstepsize = %g.'], ...
                options.minstepsize);
        end
        
        if stop
            if options.verbosity >= 1
                fprintf([reason '\n']);
            end
            break;
        end
        
        yk(curIter + 1) = M.exp(xk(curIter), xCurGradient, options.alpha);
        xk(curIter + 1) = M.exp(yk(curIter+1), M.log(yk(curIter+1), yk(curIter)),(curIter-1)/(curIter+2))
        
        xCur = xk(curIter+1);
        xCurGradient = getGradient(problem, xk(curIter+1));
        xCurCost = getCost(problem, xk(curIter+1));
        stepsize = M.dist(xk(curIter+1), xk(curIter));
        
        key = newkey;
        
        iter = iter +1;
        stats = savestats();
        info(iter+1) = stats; 
    end
    
    info = info(1, 1:iter+1);
    finalX = xCur;
    
    
    function stats = savestats()
        stats.iter = iter;
        stats.cost = xCurCost;
        stats.gradnorm = xCurGradNorm;
        if iter == 0
            stats.stepsize = NaN;
            stats.time = toc(timetic);
        else
            stats.stepsize = stepsize;
            stats.time = info(iter).time + toc(timetic);
        end
        stats.linesearch = [];
        stats = applyStatsfun(problem, xCur, storedb, key, options, stats);
    end
end